grounding
- étudier la complexité des programmes 
- comparer avec l'autre code : temps + taille en mémoire
- tester avec cluster : partager pdf, comment on utiliser ASP sur le cluster
- tester avec plusieurs coeurs : clingo -t 4(nbr de coeur)

gringo -t : 
l.40-41 faire exploser la mémoire

ajouter argument prédicat -> augmente complexité

dans la def de equal : tant que ... equal(I,J,G) garder deux arguments
- réfléchir/améliorer le programme

Pour le vendredi 21, 15h, université (PRESENTATION) :
- Réaliser une présentation de 20 minutes
- Inclure les codes (1 page par sous-projet)
- Préparer un rapport pour suppléer la présentation si nécessaire

Pour récupérer le grounding :
gringo -t asp.lp > out.txt

Pour "paralléliser" en compétition sur plusieurs cpu :
clingo -t 20 asp.lp

Sources de complexité :
- nombre d'arguments dans les prédicats
- nombre de contraintes
- nombre combinatoire de l'espace de recherche

Idée pour réduire la complexité de nos programmes à k classes : ne pas allonger les prédicats mais définir une classe de référence
Réaliser une étude de complexité plus approfondie !
-> Comparaison avec le code k-classes de l'année dernière -> le modifier pour le rendre compatible avec nos outils de formatage des données

Concernant le cluster :
- Comment installer clasp sur le cluster.
- Lancer des jobs simples (2 classes) sur le cluster.


Lors de la réunion, Antoine et Armel ont présenté leur travail concernant le programme ASP à k classes. Pour cela, ils ont transformé le programme problem.lp et v10.2.lp pour qu'ils fonctionnent avec 3 et 4 classes. Les programmes sont disponibles sur le git.
Comme mentionné par mail et lors de la réunion, les programmes n'ont pas trouvé la solution optimale pour tous les jeux de données. Le document resultats_k_classes sur le git résument les résultats.
Lors de la réunion, nous avons vu que les sources de complexité étaient les suivantes :
- nombre d'arguments dans les prédicats
- nombre de contraintes
- nombre combinatoire de l'espace de recherche

Nous allons donc réaliser une étude de complexité plus approfondie. Pour cela, nous allors récupérer le grounding avec gringo -t asp.lp > out.txt et essayer de "paralléliser" en compétition sur plusieurs CPU avec clingo -t 20 asp.lp.

Pour réduire la complexité de nos programmes à k classes, il faut donc pas augmenter le nombre d'argument dans les prédicats mais définir une classe de référence.

Une fois que nous aurons notre programme ASP amélioré, nous allons le comparer avec le code k classes de l'année dernière en l'adaptant pour le rendre compatible avec nos outils de formatage des données.

En parallèle, nous prévoyons de commencer à prendre en main le cluster d'abord en lançant les programmes à 2 classes puis notre programme à k classes amélioré. Pour cela nous devons voir comment utiliser l'ASP sur le cluter.